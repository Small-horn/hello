# 校园公告系统站点配置
# 域名: www.wsl66.top

# HTTP 服务器 - 重定向到 HTTPS
server {
    listen 80;
    server_name www.wsl66.top wsl66.top;
    
    # Let's Encrypt 证书验证路径
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # 其他请求重定向到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS 服务器
server {
    listen 443 ssl;
    http2 on;
    server_name www.wsl66.top wsl66.top;
    
    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # HSTS 安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # 根目录配置
    root /var/www/html;
    index index.html index.htm;
    
    # 错误页面 - 使用内置错误页面避免文件不存在的问题
    error_page 404 =404 @not_found;
    error_page 500 502 503 504 /50x.html;
    
    # favicon.ico 特殊处理 - 避免404日志噪音
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =204;
    }

    # CSS 和 JS 文件处理 - 短期缓存
    location ~* \.(css|js)$ {
        root /var/www/html;
        expires 1m;
        add_header Cache-Control "public, max-age=60";
        add_header Vary Accept-Encoding;
        access_log off;
        try_files $uri =404;
    }

    # 其他静态资源处理 - 保持长期缓存
    location ~* \.(jpg|jpeg|png|gif|woff|woff2|ttf|eot|svg|webp)$ {
        root /var/www/html;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        access_log off;
        try_files $uri =404;
    }

    # API 请求限流
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://campus_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # 编码配置
        charset utf-8;
        proxy_set_header Accept-Charset "utf-8";

        # 禁用缓存 - 确保API响应始终是最新的
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        expires off;

        # 超时配置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # 禁用代理缓存
        proxy_cache off;
        proxy_no_cache 1;
        proxy_cache_bypass 1;

        # 添加缓存状态头
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # 登录接口特殊限流
    location /api/auth/login {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://campus_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 编码配置
        charset utf-8;
        proxy_set_header Accept-Charset "utf-8";
    }
    
    # 健康检查
    location /actuator/health {
        proxy_pass http://campus_app;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # 主应用代理 - 处理动态请求和不存在的静态文件
    location / {
        # 首先尝试静态文件，然后代理到后端
        try_files $uri $uri/ @backend;
        root /var/www/html;

        # 对于HTML文件完全禁用缓存
        location ~* \.(html|htm)$ {
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires off;
        }
    }

    # 后端代理（当静态文件不存在时）
    location @backend {
        proxy_pass http://campus_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # 编码配置
        charset utf-8;
        proxy_set_header Accept-Charset "utf-8";

        # WebSocket 支持
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # 超时配置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # 缓存配置
        proxy_cache app_cache;
        proxy_cache_valid 200 302 5m;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
    }

    # 自定义404处理 - 返回简单的404响应而不依赖文件
    location @not_found {
        internal;
        return 404 '<!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>404 Not Found</h1><p>The requested resource was not found on this server.</p></body></html>';
        add_header Content-Type text/html;
    }
}
